datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String? @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user              User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?    @unique
  emailVerified DateTime?  @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Blogpost[]
  role          Role       @default(USER)

  @@map("users")
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Certificate {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  desc       String
  imageLink  String
  courseLink String
  profLink   String
  createdAt  DateTime? @default(now())
  updatedAt  DateTime?

  @@map("certificates")
}

model Project {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  desc      String
  repoLink  String
  liveLink  String
  imageLink String
  tags      String[]
  createdAt DateTime? @default(now())
  updatedAt DateTime?

  @@map("projects")
}

model Blogpost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String   @db.ObjectId
  tags      String[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blogposts")
}

enum Role {
  USER
  ADMIN
  GUEST
}
